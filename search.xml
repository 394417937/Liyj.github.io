<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Promise</title>
      <link href="/2022/09/23/article-9/"/>
      <url>/2022/09/23/article-9/</url>
      
        <content type="html"><![CDATA[<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><p>三个状态  pending  fulfilled   rejected</p><p>状态凝固 一旦状态发生变化 就不能再更新状态</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 异步代码放到promise中去...</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>成功的结果<span class="token punctuation">)</span>      <span class="token comment">// reject(失败的原因)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// res 就是成功的结果</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// error 就是失败的原因</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="手写Promise-all"><a href="#手写Promise-all" class="headerlink" title="手写Promise.all"></a>手写Promise.all</h4><p>等待原则，等待所有的Promise都处理完成，可以用于处理一些并发任务</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  Promise<span class="token punctuation">.</span><span class="token function-variable function">myall</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">//用于存储成功的数量</span>    <span class="token keyword">let</span> resArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token comment">// 这里不能直接调用resolve  要等都成功了 在调用resolve</span>        arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            <span class="token comment">//item是：p1,p2,p3</span>            item<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>                count<span class="token operator">++</span>                resArr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> res                <span class="token comment">//判断count 和 arr.length</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">===</span> count<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">// 数组长度和成功的次数对得上</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>resArr<span class="token punctuation">)</span>                 <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>    <span class="token comment">// 试试看吧~~</span>    Promise<span class="token punctuation">.</span><span class="token function">myall</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">values</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="手写Promise-race"><a href="#手写Promise-race" class="headerlink" title="手写Promise.race"></a>手写Promise.race</h4><p>赛跑, 竞速原则, 只要三个promise中有一个满足条件, 就会执行.then</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function-variable function">myrace</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token comment">// p1 p2 p3 有一个成功后 需要调用resolve!!!</span>          arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// item: p1 p2 p3</span>            item<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对this的理解</title>
      <link href="/2022/09/23/article-8/"/>
      <url>/2022/09/23/article-8/</url>
      
        <content type="html"><![CDATA[<h1 id="对this的理解"><a href="#对this的理解" class="headerlink" title="对this的理解"></a>对this的理解</h1><h4 id="默认绑定-指向window的情况"><a href="#默认绑定-指向window的情况" class="headerlink" title="默认绑定 (指向window的情况)"></a>默认绑定 (指向window的情况)</h4><p>  – 函数调用模式 fn() –</p><p>默认情况下，this 会被绑定到全局对象上，比如在浏览器环境中就为window对象，在node.js环境下为global对象。</p><p>如下代码展示了这种绑定关系：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">message <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">test</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "Hello"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="隐式绑定-谁调用-this指向谁"><a href="#隐式绑定-谁调用-this指向谁" class="headerlink" title="隐式绑定 (谁调用, this指向谁)"></a>隐式绑定 (谁调用, this指向谁)</h4><p>  –(方法调用模式 obj.fn() ) –</p><p>如果函数的调用是从对象上发起时，则该函数中的 this 会被自动隐式绑定为对象：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"hello,world"</span><span class="token punctuation">,</span>  <span class="token literal-property property">test</span><span class="token operator">:</span> test<span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "hello,world"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="显式绑定-又叫做硬绑定"><a href="#显式绑定-又叫做硬绑定" class="headerlink" title="显式绑定 (又叫做硬绑定)"></a>显式绑定 (又叫做硬绑定)</h4><p>  –(上下文调用模式, 想让this指向谁, this就指向谁)–</p><p>硬绑定 &#x3D;&gt; call  apply  bind</p><p>可以显式的进行绑定：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"李扬洁"</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"黄莉莉"</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "李扬洁"</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "黄莉莉"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="new-绑定-构造函数模式"><a href="#new-绑定-构造函数模式" class="headerlink" title="new 绑定 (构造函数模式)"></a>new 绑定 (构造函数模式)</h4><p>在使用 new 创建对象时也会进行 this 绑定</p><p>当使用 new 调用构造函数时，会创建一个新的对象并将该对象绑定到构造函数的 this 上：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Greeting</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Greeting</span><span class="token punctuation">(</span><span class="token string">"hello,world"</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span>message <span class="token comment">// "hello,world"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="箭头函数中的this"><a href="#箭头函数中的this" class="headerlink" title="箭头函数中的this"></a>箭头函数中的this</h4><p>箭头函数中的 this 就是它上层上下文函数中的 this。 上层没有在往上，以此类推</p>]]></content>
      
      
      <categories>
          
          <category> Js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断是否是数组</title>
      <link href="/2022/09/23/article-7/"/>
      <url>/2022/09/23/article-7/</url>
      
        <content type="html"><![CDATA[<h1 id="判断是否是数组"><a href="#判断是否是数组" class="headerlink" title="判断是否是数组"></a>判断是否是数组</h1><hr><h4 id="方法一：使用-toString-方法"><a href="#方法一：使用-toString-方法" class="headerlink" title="方法一：使用 toString 方法"></a>方法一：使用 toString 方法</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token keyword">function</span> <span class="token function">isArray</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 用最顶层的 Object.prototype 的 toString 方法进行调用</span>    <span class="token comment">// 返回格式 [object 类型]</span><span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Array]'</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方法二：ES6的-Array-isArray-方法-推荐"><a href="#方法二：ES6的-Array-isArray-方法-推荐" class="headerlink" title="方法二：ES6的 Array.isArray 方法 (推荐)"></a>方法二：ES6的 Array.isArray 方法 (推荐)</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="方法三：-通过instanceof判断"><a href="#方法三：-通过instanceof判断" class="headerlink" title="方法三： 通过instanceof判断"></a>方法三： 通过instanceof判断</h4><p>检验构造函数的prototype属性是否出现在对象的原型链中的任何位置，返回一个布尔值<br>~~<br>需要注意的是，prototype属性是可以修改的，所以并不是最初判断为true就一定永远为真</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>b <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方法四：-通过constructor判断"><a href="#方法四：-通过constructor判断" class="headerlink" title="方法四： 通过constructor判断"></a>方法四： 通过constructor判断</h4><p>实例的构造函数属性constructor指向构造函数，那么通过constructor属性也可以判断是否为一个数组。<br>~~<br>同样，这种判断也会存在多个全局环境的问题，导致的问题与instanceof相同</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array<span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型和原型链</title>
      <link href="/2022/09/23/article-6/"/>
      <url>/2022/09/23/article-6/</url>
      
        <content type="html"><![CDATA[<h1 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h1><h4 id="原型"><a href="#原型" class="headerlink" title="原型:"></a>原型:</h4><p> 除去一部分内建函数，绝大多数的函数都会包含有一个叫做 prototype 的属性,这个属性的值是个对象,称之为原型,<br> 基于构造函数创建出来的实例, 都可以共享访问原型对象的属性.</p><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链:"></a>原型链:</h4><p> 对象都有__proto__属性,这个属性指向它的原型对象,原型对象也是对象,也有__proto__属性,指向原型对象的原型对象,这样一层一层形成的链式结构称为原型链.</p>]]></content>
      
      
      <categories>
          
          <category> Js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对于闭包的理解</title>
      <link href="/2022/09/22/article-5/"/>
      <url>/2022/09/22/article-5/</url>
      
        <content type="html"><![CDATA[<h1 id="对于闭包的理解"><a href="#对于闭包的理解" class="headerlink" title="对于闭包的理解"></a>对于闭包的理解</h1><p> 两个嵌套关系的函数,内部函数可以访问外部函数定义的变量</p><h5 id="闭包的优点"><a href="#闭包的优点" class="headerlink" title="闭包的优点"></a>闭包的优点</h5><ol><li>形成私有空间，数据私有化，避免全局变量的污染</li><li>持久化内存，保存数据</li></ol><h5 id="闭包的缺点"><a href="#闭包的缺点" class="headerlink" title="闭包的缺点"></a>闭包的缺点</h5><ol><li>持久化内存导致内存泄漏</li></ol><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><ol><li>尽量避免函数的嵌套，以及变量的引用</li><li>执行完的变量，可以赋值null，让垃圾回收机制，进行回收释放内存（当不在引用的变量，垃圾回收机制就会回收）</li></ol><h5 id="比如这样"><a href="#比如这样" class="headerlink" title="比如这样"></a>比如这样</h5> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token keyword">function</span> <span class="token function">Fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span>  <span class="token keyword">function</span> <span class="token function">Fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    num<span class="token operator">++</span>    <span class="token keyword">return</span> num  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> Fn2<span class="token punctuation">&#125;</span><span class="token keyword">var</span> func <span class="token operator">=</span> <span class="token function">Fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现深浅拷贝</title>
      <link href="/2022/09/22/article-4/"/>
      <url>/2022/09/22/article-4/</url>
      
        <content type="html"><![CDATA[<h1 id="实现一个深浅拷贝"><a href="#实现一个深浅拷贝" class="headerlink" title="实现一个深浅拷贝"></a>实现一个深浅拷贝</h1><ul><li><p>浅拷贝: 拷贝对象的一层属性,如果对象里面还有对象,拷贝的是地址, 两者之间修改会有影响,适用于对象里面属性的值是简单数据类型的</p></li><li><p>深拷贝: 拷贝对象的多层属性,如果对象里面还有对象,会继续拷贝,使用递归去实现.</p></li></ul><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><ol><li><p>for循环第一层</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">'UI'</span><span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token literal-property property">love</span><span class="token operator">:</span> <span class="token string">'eat'</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">getObj</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> newObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> newObj    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token function">getObj</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Object.assign()<br> Object.assign我们经常会用到合并对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token comment">// Object.assign的第一个参数一定要是一个空对象</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> obj1<span class="token punctuation">)</span>obj2<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>…扩展运算符</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>obj1<span class="token punctuation">&#125;</span> obj2<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span><span class="token comment">// 打印obj1 -> a:1, b:2</span><span class="token comment">// 打印obj2 -> a:4, b:2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Array.concat()</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> oldArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"One"</span><span class="token punctuation">,</span> <span class="token string">"Two"</span><span class="token punctuation">,</span> <span class="token string">"Three"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"Four"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token keyword">const</span> newArr <span class="token operator">=</span> oldArr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"Six"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>newArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"love"</span><span class="token punctuation">;</span>newArr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Five'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oldArr<span class="token punctuation">)</span> <span class="token comment">//  ['One', 'Two', 'Three', &#123; name: 'Five' &#125; ]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span> <span class="token comment">// [ 'One', 'love', 'Three', &#123; name: 'Five' &#125;, 'Six'  ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Array.slice()</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> oldArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"One"</span><span class="token punctuation">,</span> <span class="token string">"Two"</span><span class="token punctuation">,</span> <span class="token string">"Three"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"Four"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token keyword">const</span> newArr <span class="token operator">=</span> oldArr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>newArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"love"</span><span class="token punctuation">;</span>newArr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Five'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oldArr<span class="token punctuation">)</span> <span class="token comment">//  ['One', 'Two', 'Three', &#123; name: 'Five' &#125; ]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span> <span class="token comment">// [ 'One', 'love', 'Three', &#123; name: 'Five' &#125; ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><ol><li>JSON.stringify<br> 不能处理函数和正则，而且当对象中有循环引用会报错</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> oldObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'李扬洁'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name1</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">value</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>oldObj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newObj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'小菜鸡'</span>newObj<span class="token punctuation">.</span>name1<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oldObj<span class="token punctuation">)</span> <span class="token comment">// &#123;name: '李扬洁',name1: &#123; value: 3 &#125;&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">)</span> <span class="token comment">// &#123; name: '小菜鸡', name1: &#123; value: 4 &#125; &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>_.cloneDeep() 深度克隆</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'lodash'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> oldObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token literal-property property">c</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">value</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> newObj <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">cloneDeep</span><span class="token punctuation">(</span>oldObj<span class="token punctuation">)</span>newObj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span>newObj<span class="token punctuation">.</span>c<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oldObj<span class="token punctuation">)</span> <span class="token comment">// &#123; a: 1, b: 2, c: &#123; value: 3 &#125; &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">)</span> <span class="token comment">// &#123; a: 2, b: 2, c: &#123; value: 4 &#125; &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>递归</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span> <span class="token comment">// 如果是null或者undefined我就不进行拷贝操作</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 可能是对象或者普通的值  如果是函数的话是不需要深拷贝</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token comment">// 是对象的话就要进行深拷贝</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> hash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> cloneObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">obj<span class="token punctuation">.</span>constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 找到的是所属类原型上的constructor,而原型上的 constructor指向的是当前类本身</span>    hash<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> cloneObj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 实现一个递归拷贝</span>        cloneObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> cloneObj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>obj1<span class="token punctuation">.</span>c <span class="token operator">=</span> obj1<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>obj2<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span>obj2<span class="token punctuation">.</span>b<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>px/em/rem的区别与rem的原理</title>
      <link href="/2022/09/22/article-3/"/>
      <url>/2022/09/22/article-3/</url>
      
        <content type="html"><![CDATA[<h1 id="px-x2F-em-x2F-rem的区别与rem的原理"><a href="#px-x2F-em-x2F-rem的区别与rem的原理" class="headerlink" title="px&#x2F;em&#x2F;rem的区别与rem的原理"></a>px&#x2F;em&#x2F;rem的区别与rem的原理</h1><h2 id="px-x2F-em-x2F-rem的区别"><a href="#px-x2F-em-x2F-rem的区别" class="headerlink" title="px&#x2F;em&#x2F;rem的区别"></a>px&#x2F;em&#x2F;rem的区别</h2><ol><li>px 是固定的像素，一旦设置了就无法因为适应页面大小而改变</li><li>em 和rem相对于px更具有灵活性，他们是相对长度单位，意思是长度不是定死了的，更适用于响应式布局</li><li>em 相对自身font-size，没有则相对于父元素，rem相对于根元素的font-size</li></ol><h2 id="rem的原理"><a href="#rem的原理" class="headerlink" title="rem的原理"></a>rem的原理</h2><ol><li>rem 是css的相对单位，rem缩放是相对根元素字体大小.</li><li>rem 布局的本质是等比缩放，一般是基于宽度。</li><li>rem 会配合媒体查询（或js动态获取屏幕宽度）来一起使用，来实现屏幕的适配。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Css3新特性</title>
      <link href="/2022/09/22/article-2/"/>
      <url>/2022/09/22/article-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Css3新特性"><a href="#Css3新特性" class="headerlink" title="Css3新特性"></a>Css3新特性</h1><ol><li>圆角 border-radius</li><li>盒子模型 box-sizing</li><li>阴影 box-shadow 盒子阴影  text-shadow 文字阴影</li><li>过渡 transition</li><li>2D转换transform  translate(平移) scale(缩放)  skew(斜切) rotate(旋转) transform-origin 控制转换中心点</li><li>3D转换 perspective(透视距)  transform-style(3D控件效果)</li><li>渐变 linear-gradient radial-gradient</li><li>弹性布局 flex</li><li>媒体查询 @media screen and () {…}</li><li>边框图片 border-image</li><li>自定义动画 @keyframes    animation</li><li>颜色 新增RGBA HSLA模式</li><li>背景 background-size   background-origin   background-clip</li></ol>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flex的基本使用</title>
      <link href="/2022/09/22/article-1/"/>
      <url>/2022/09/22/article-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Flex的基本使用"><a href="#Flex的基本使用" class="headerlink" title="Flex的基本使用"></a>Flex的基本使用</h1><hr><h4 id="弹性盒子组成"><a href="#弹性盒子组成" class="headerlink" title="弹性盒子组成"></a>弹性盒子组成</h4>   <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 弹性容器 */</span><span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token comment">/* 主轴 */</span>justify-content<span class="token comment">/* 侧轴*/</span>align-items<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="主轴对齐方式"><a href="#主轴对齐方式" class="headerlink" title="主轴对齐方式"></a>主轴对齐方式</h4>   <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 默认值 左上角开始 */</span><span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span> <span class="token comment">/* 右上角开始 */</span><span class="token property">justify-content</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span><span class="token comment">/* 水平居中对齐 重要*/</span><span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token comment">/* 间距在子盒子的两侧 */</span><span class="token property">justify-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span> <span class="token comment">/* 两端对齐 空间在子盒子之间 重要*/</span><span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span> <span class="token comment">/* 盒子的所有间距都相等 */</span><span class="token property">justify-content</span><span class="token punctuation">:</span> space-evenly<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="侧轴对齐方式"><a href="#侧轴对齐方式" class="headerlink" title="侧轴对齐方式"></a>侧轴对齐方式</h4>   <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 顶部对齐 */</span><span class="token property">align-items</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span> <span class="token comment">/* 底部对齐 */</span><span class="token property">align-items</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span> <span class="token comment">/* 垂直居中对齐 重点*/</span><span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token comment">/*默认值 顶部对齐 当子盒子没有高度时  会将子盒子拉伸充满整个容器 */</span><span class="token property">align-items</span><span class="token punctuation">:</span> stretch<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="改变主轴方向"><a href="#改变主轴方向" class="headerlink" title="改变主轴方向"></a>改变主轴方向</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 改变主轴方向  默认是水平 从左到右排列  */</span>   <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span>    <span class="token comment">/* 垂直方向 从上向下  重点*/</span>   <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>   <span class="token comment">/* 水平排列  从右向左 */</span>   <span class="token property">flex-direction</span><span class="token punctuation">:</span> row-reverse<span class="token punctuation">;</span>    <span class="token comment">/* 垂直方向  从下向上 */</span>   <span class="token property">flex-direction</span><span class="token punctuation">:</span> column-reverse<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
